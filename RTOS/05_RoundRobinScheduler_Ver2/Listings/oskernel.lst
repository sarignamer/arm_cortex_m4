


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             |.text|, CODE,READONLY,ALIGN=2
    2 00000000                 THUMB
    3 00000000                 EXTERN           currentPt
    4 00000000                 EXPORT           SysTick_Handler
    5 00000000                 EXPORT           osSchedulerLaunch
    6 00000000         
    7 00000000         ; On Each SysTick_Handler save the current thread and lo
                       ad the next thread:
    8 00000000         ; --------------------------------------
    9 00000000         ; 1. save stack to thread (currentPtr->stackPtr)
   10 00000000         ; 2. switch to the new thread (currentPtr = currentPtr->
                       nextPtr)
   11 00000000         ; 3. load stack from next thread for switch (SP = curren
                       tPtr->stackPtr)
   12 00000000         
   13 00000000         SysTick_Handler                      ; Invoking the call
                                                            , auto saves R0, R1
                                                            , R2, R3, R12, LR, 
                                                            PC, PSR
   14 00000000 B672            CPSID            I           ; Disable interupts
                                                            
   15 00000002 E92D 0FF0       PUSH             {R4-R11}    ; Push registers R4
                                                             to R11 unto the st
                                                            ack (saving them)
   16 00000006 480D            LDR              R0,=currentPt ; R0 points to cu
                                                            rrentPt (R0 = &curr
                                                            entPt)
   17 00000008 6801            LDR              R1,[R0]     ; R1 is currentPt (
                                                            R1 = currentPt)
   18 0000000A F8C1 D000       STR              SP,[R1]     ; Saves the SP to R
                                                            1 (currentPt->stack
                                                            Ptr = SP)
   19 0000000E 6849            LDR              R1,[R1,#4]  ; Advance the SP to
                                                             the next pt in the
                                                             tcb structure (we 
                                                            #4 for an offset) (
                                                            R1 = currentPtr->ne
                                                            xtPtr)
   20 00000010 6001            STR              R1,[R0]     ; R0 now points to 
                                                            the next pt which i
                                                            s also the next thr
                                                            ead (currentPtr = R
                                                            1 = currentPtr->nex
                                                            tPtr)
   21 00000012 F8D1 D000       LDR              SP,[R1]     ; SP = currentPt->s
                                                            tackPtr
   22 00000016 E8BD 0FF0       POP              {R4-R11}    ; restore R4 to R11
                                                             from new stack (th
                                                            e stack of the next
                                                             thread)
   23 0000001A B662            CPSIE            I           ; Enable interputs
   24 0000001C 4770            BX               LR          ; return from subro
                                                            utine. Automaticall
                                                            y restores R0, R1, 
                                                            R2, R3, R12, LR, PC
                                                            , PSR from new stac
                                                            k (next thread)
   25 0000001E         
   26 0000001E         



ARM Macro Assembler    Page 2 


   27 0000001E         
   28 0000001E         osSchedulerLaunch                    ; We launch the sch
                                                            eduler by setting S
                                                            P to the value of t
                                                            he first thread
   29 0000001E 4807            LDR              R0,=currentPt
   30 00000020 6802            LDR              R2,[R0]     ; R2 = currentPt
   31 00000022 F8D2 D000       LDR              SP,[R2]     ; SP = currentPt->s
                                                            tackPt
   32 00000026 E8BD 0FF0       POP              {R4-R11}    ; restore R4 to R11
                                                             from the thread st
                                                            ack
   33 0000002A BC0F            POP              {R0-R3}
   34 0000002C F85D CB04       POP              {R12}
   35 00000030 B001            ADD              SP,SP,#4    ; Skip LR
   36 00000032 F85D EB04       POP              {LR}
   37 00000036 B001            ADD              SP,SP,#4    ; Skip PSR
   38 00000038 B662            CPSIE            I           ; Enable interputs
   39 0000003A 4770            BX               LR
   40 0000003C         
   41 0000003C         
   42 0000003C                 ALIGN
   43 0000003C                 END
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\oskernel_1.d -o.\objects\oskernel_1.o -I.\RTE\_STM32F
4 -Ie:\dev\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -Ie:\dev\Arm\Packs\Keil
\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include --predefine="__
EVAL SETA 1" --predefine="__UVISION_VERSION SETA 527" --predefine="_RTE_ SETA 1
" --predefine="STM32F411xE SETA 1" --list=.\listings\oskernel.lst osKernel.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 1 in file osKernel.s
   Uses
      None
Comment: .text unused
SysTick_Handler 00000000

Symbol: SysTick_Handler
   Definitions
      At line 13 in file osKernel.s
   Uses
      At line 4 in file osKernel.s
Comment: SysTick_Handler used once
osSchedulerLaunch 0000001E

Symbol: osSchedulerLaunch
   Definitions
      At line 28 in file osKernel.s
   Uses
      At line 5 in file osKernel.s
Comment: osSchedulerLaunch used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

currentPt 00000000

Symbol: currentPt
   Definitions
      At line 3 in file osKernel.s
   Uses
      At line 16 in file osKernel.s
      At line 29 in file osKernel.s

1 symbol
341 symbols in table
